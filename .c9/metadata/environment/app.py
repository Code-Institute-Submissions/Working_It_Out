{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"import os\nfrom flask import Flask, render_template, redirect, request, url_for\nfrom flask_pymongo import PyMongo\nfrom bson.objectid import ObjectId\nfrom os import path\nif path.exists(\"env.py\"):\n  import env \n\napp = Flask(__name__)\napp.config[\"MONGO_DBNAME\"] = 'working_it_out'\napp.config[\"MONGO_URI\"] = os.getenv('MONGO_URI')\n\nmongo = PyMongo(app)\n\n\n@app.route('/')\n@app.route('/get_gyms')\ndef get_gyms():\n    return render_template(\"home.html\", gyms=mongo.db.gyms.find())\n\n@app.route(\"/about\")\ndef about():\n    return render_template(\"about.html\")\n    \n\n@app.route(\"/add_new_gym\")\ndef add_new_gym():\n    return render_template(\"add_gym.html\")\n\n# Sends the data that the user inserts to the database\n\n@app.route(\"/insert_gym\", methods=['POST'])\ndef insert_gym():\n    gym = mongo.db.gyms\n    gym.insert_one({\n        'gym_name': request.form.get('gym_name'),\n        'gym_type': request.form.get('gym_type'),\n        'gym_address':request.form.get('gym_address'),\n        'cost':request.form.get('cost'),\n        'gym_url':request.form.get('gym_url'),\n        })\n    return redirect(url_for('get_gyms'))\n\n\n# Allows user to update information about a gym\n\n@app.route(\"/edit_gym/<gym_id>\")\ndef edit_gym(gym_id):\n    the_gym = mongo.db.gyms.find_one({\"_id\": ObjectId(gym_id)})\n    return render_template(\"update_gym.html\", gym=the_gym)\n    \n@app.route(\"/update_gym/<gym_id>\", methods=[\"POST\"])\ndef update_gym(gym_id):\n    gym = mongo.db.gyms\n    gym.update({'_id': ObjectId(gym_id)}, {\n        'gym_name' : request.form.get('gym_name'),\n        'status' : request.form.get('gym_type'),\n        'address' : request.form.get('gym_address'),\n        'cost' : request.form.get('cost'),\n        'gym_url' : request.form.get('gym_url')\n    })\n    return redirect(url_for('get_gyms'))\n\n# Delete option for a user if they wish to delete a review they wrote or delete a review written by someone else that may be incorrect\n\n@app.route(\"/delete_gym/<gym_id>\")\ndef delete_gym(gym_id):\n    mongo.db.gyms.remove({'_id': ObjectId(gym_id)})\n    return redirect(url_for('get_gyms'))\n    \n@app.route(\"/leave_review\")\ndef gym_review():\n    return render_template(\"gym_review.html\", gyms=mongo.db.gyms.find())    \n    \n# Sends the data that the user inserts to the database\n\n@app.route(\"/gym_review\", methods=['POST'])\ndef insert_review():\n    review = mongo.db.reviews\n    review.insert_one(request.form.to_dict())\n    return redirect(url_for('gym_review'))\n\n\n@app.route(\"/read_review\")\ndef read_review():\n    return render_template(\"read_reviews.html\", reviews=mongo.db.reviews.find())\n\nif __name__ == '__main__':\n    app.run(host=os.environ.get('IP'),\n            port=int(os.environ.get('PORT')),\n            debug=True)","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":3,"column":34},"end":{"row":3,"column":35},"action":"remove","lines":[" "],"id":1},{"start":{"row":3,"column":34},"end":{"row":4,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":4,"column":0},"end":{"row":6,"column":13},"action":"insert","lines":["from os import path","if path.exists(\"env.py\"):","  import env "],"id":2}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":6,"column":13},"end":{"row":6,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":true,"wrapToView":true},"firstLineState":{"row":11,"state":"start","mode":"ace/mode/python"}},"timestamp":1580670785848}